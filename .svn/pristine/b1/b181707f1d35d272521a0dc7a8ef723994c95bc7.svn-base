@page "/Profile"

@inject ILogin login
@inject IProfileService ProfileService
@inject NotificationService NotificationService
@inject ILocalStorageService localStore
@inject AppState appState
@inject IRegisterService RegisterService
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<div class="container topMargin">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><NavLink href="/" class="bread"><i class="fas fa-home"></i> Home</NavLink></li>
                    <li class="breadcrumb-item active" aria-current="page">My Account</li>
                </ol>
            </nav>

        </div>
    </div>
    <div class="row mt-5 mt-md-4 my-2">
        <div class="col-xl-12 col-sm-12">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link active" href="profile">Account Details</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="MyOrders">Orders</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="MyAddress">Address</a>
                </li>
            </ul>
        </div>
    </div>

    <div class="row fullHeight">
        <div class="col-md-2"></div>
        <div class="col-md-8 centerCol">
            <div class="loginBox">
                <h2 class="mainTitles" style="margin-bottom:40px">My Account Details</h2>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4"><label for="exampleInputfname">First Name</label></div>
                        <div class="col-md-8"><input type="text" @bind-value="fname" class="form-control" id="exampleInputfname" placeholder="First Name" disabled></div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4"><label for="examplelname">Last Name</label></div>
                        <div class="col-md-8"><input type="text" @bind-value="lname" class="form-control" id="exampleInputlname" placeholder="Last Name" disabled></div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4"><label for="exampleInputEmail1">Email Address</label></div>
                        <div class="col-md-8"><input type="email" @bind-value="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Email Address" disabled></div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4"><label for="exampleInputPassword1">Mobile Number</label></div>
                        <div class="col-md-8"><input type="text" @bind-value="mobile" class="form-control" id="exampleInputPassword1" placeholder="Mobile Number" disabled></div>
                    </div>
                </div>

                <h5 style="margin-top: 40px; color: rgb(139, 30, 41); margin-bottom: 40px">Change Password</h5>

                @if (passwordchange == 0 && errorMessage != "")
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                @if (passwordchange == 1)
                {
                    <div class="alert alert-success" role="alert">
                        @errorMessage
                    </div>
                }

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4"><label for="exampleInputcurrpw">Current Password</label></div>
                        <div class="col-md-8">
                            <div id="passwordBox">
                                <input type="@passwordTypeforpassword" @bind-value="currentPassword" class="form-control" id="exampleInputcurrpw" placeholder="Current Password" required minlength="8">
                                <button class="btn" @onclick="HandlePasswordIcon"><i class="topIcons @iClassforPassword"></i></button>
                            </div> 
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4"><label for="examplenewpw">New Password</label></div>
                        <div class="col-md-8">
                            <div id="passwordBox">
                                <input type="@passwordTypeforNewPW" @bind-value="newPassword" class="form-control" id="examplenewpw" placeholder="New Password" required minlength="8">
                                <button class="btn" @onclick="HandleNewPasswordIcon"><i class="topIcons @iClassforNewPW"></i></button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-4"><label for="exampleInputconfirm">Confirm Password</label></div>
                        <div class="col-md-8">
                            <div id="passwordBox">
                                <input type="@passwordTypeforconfirmPW" @bind-value="confirmPassword" class="form-control" id="exampleInputconfirmpw" placeholder="Confirm Password" required minlength="8">
                                <button class="btn" @onclick="HandleConfirmPasswordIcon"><i class="topIcons @iClassforconfirmPW"></i></button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-4"></div>
                    <div class="col-md-8"><button type="submit" class="btn checkoutBtn w-100" @onclick="HandleChangePassword">Change Password</button></div>
                </div>

                

            </div>
        </div>

    </div>
</div>

@code {

    private string fname;
    private string lname;
    private string email;
    private string mobile;

    private string currentPassword;
    private string newPassword;
    private string confirmPassword;
    private int customerid;
    private string result;
    private int passwordchange = 0;
    private string errorMessage = "";

    // private User user = new User();
    private RegisterUser userRegister = new RegisterUser();
    public User user { get; set; }

    private User currentuser = new User();

    private string iClassforPassword = "fas fa-eye-slash";
    private string passwordTypeforpassword = "password";
    private string iClassforNewPW = "fas fa-eye-slash";
    private string passwordTypeforNewPW = "password";
    private string iClassforconfirmPW = "fas fa-eye-slash";
    private string passwordTypeforconfirmPW = "password";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            user = await localStore.GetItemAsync<User>("user");
            appState.SetUser(user);
            customerid = appState.user.CustomerId;

            var registeruser = Task.Run(async () => await ProfileService.GetCustomer(customerid));
            userRegister = registeruser.Result;

            fname = userRegister.CustomerFirstName;
            lname = userRegister.CustomerLastName;
            email = appState.user.UserName;
            mobile = userRegister.CustomerMobileNo;
            //  customerid = appState.user.CustomerId;
            StateHasChanged();
        }
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        //  user = login.GetUsers();
        //user = await localStore.GetItemAsync<User>("user");
        //appState.SetUser(user);

    }

    protected async void HandleChangePassword()
    {
        passwordchange = 0;
        errorMessage = "";

        if(currentPassword == null || currentPassword == string.Empty || newPassword == null || newPassword == string.Empty ||confirmPassword == null || confirmPassword == string.Empty)
        {
            errorMessage = "Please fill all the feilds.";
        }

        else
        {

            var logincustomer = Task.Run(async () => await RegisterService.LoginUser(email, currentPassword));
            currentuser = logincustomer.Result;

            if (currentuser.LoginId == 0 && currentuser.CustomerId == 0)
            {
                newPassword = "";
                confirmPassword = "";
                currentPassword = "";
                errorMessage = "Current Password is incorrect";
            }

            else
            {

                if (string.Compare(newPassword, confirmPassword) != 0)
                {
                    newPassword = "";
                    confirmPassword = "";
                    errorMessage = "Password and confirm password is not matching";
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Passwords", Detail = "are not Matching", Duration = 4000 });
                }

                else if (newPassword.Length < 8 || confirmPassword.Length < 8)
                {
                    newPassword = "";
                    confirmPassword = "";
                    errorMessage = "Password should contain more than 8 characters";
                }

                else if (string.Compare(newPassword, currentPassword) == 0)
                {
                    newPassword = "";
                    confirmPassword = "";
                    errorMessage = "Current password and new password is same. Please enter new password";
                }

                else
                {
                    var changePassword = Task.Run(async () => await ProfileService.ChangePassword(customerid, newPassword));
                    result = changePassword.Result;

                    if (result.ToLower() == "successfully updated")
                    {
                        passwordchange = 1;
                        newPassword = "";
                        confirmPassword = "";
                        currentPassword = "";
                        errorMessage = "Password is change successfully";
                        await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Password is change successfully!");
                        //   ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Successfully", Detail = "Updated", Duration = 4000 });
                        Logout();
                    }
                }
            }
        }

    }


    private void HandlePasswordIcon()
    {
        if (iClassforPassword == "fas fa-eye-slash")
        {
            iClassforPassword = "fas fa-eye";
            passwordTypeforpassword = "text";
        }
        else
        {
            iClassforPassword = "fas fa-eye-slash";
            passwordTypeforpassword = "password";
        }
    }

    private void HandleNewPasswordIcon()
    {
        if (iClassforNewPW== "fas fa-eye-slash")
        {
            iClassforNewPW = "fas fa-eye";
            passwordTypeforNewPW = "text";
        }
        else
        {
            iClassforNewPW = "fas fa-eye-slash";
            passwordTypeforNewPW = "password";
        }
    }

    private void HandleConfirmPasswordIcon()
    {
        if (iClassforconfirmPW == "fas fa-eye-slash")
        {
            iClassforconfirmPW = "fas fa-eye";
            passwordTypeforconfirmPW = "text";
        }
        else
        {
            iClassforconfirmPW = "fas fa-eye-slash";
            passwordTypeforconfirmPW = "password";
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private async void Logout()
    {
        user = null;
        appState.SetUser(null);
        await localStore.RemoveItemAsync("user");
        StateHasChanged();
        NavManager.NavigateTo("/login");
    }
}
