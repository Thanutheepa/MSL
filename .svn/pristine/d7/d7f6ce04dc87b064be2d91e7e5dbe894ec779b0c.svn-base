// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorServerApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.SearchProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.ViewProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.CartScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.LoginScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.CoreBusiness.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Controls;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.RegisterScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.FavProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\Pages\SetEditBillingAddress.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MyBillingAddress/{status}")]
    public partial class SetEditBillingAddress : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 150 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\Pages\SetEditBillingAddress.razor"
       
    [Parameter]
    public string Status { get; set; }

    private int Id;
    private int CustomerId;
    private string AdNo;
    private string AdRoad;
    private string AdCity;
    private string Province = "";
    private string Country = "";
    private string MobileNo = "";
    private string LandNo = "";
    private string EmailAddress;
    private string PostalCode;
    private string Longitude = "";
    private string Latitude = "";
    private string UserName;
    private string FullAddress;
    private int District = 0;
    private int billingid;
    private int result1;
    private int result2;
    int resultstatus = 1;
    private string errorMessage = "";
    private bool CheckedValue = false;
    private int shippingid;
    private string emailerror = "";
    private string phonenoerror = "";
    private string landnoerror = "";

    List<string> countires = new List<string>() { "SriLanka", "Australia", "United Kingdom", "New Zealand" };
    List<string> provinces = new List<string>() { "Western province", "Central province", "Southern province", "Uva province", "Sabaragamuwa province", "North western province", "North central province", "Northern province", "eastern province" };

    private List<Country> countryList { get; set; }
    private List<State> stateList { get; set; }
    private Address setBillingAddress = new Address();
    private List<Address> getShippingAddress = new List<Address>();

    public User user { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            countryList = new List<Country>();
            countryList = (await apiService.GetCountries()).ToList();
            user = await localStore.GetItemAsync<User>("user");
            appState.SetUser(user);
            CustomerId = appState.user.CustomerId;
            UserName = appState.user.UserName;
            EmailAddress = appState.user.UserName;

            if (Status == "2")
            {
                var customerbilling = Task.Run(async () => await ProfileService.GetCustomerBilling(CustomerId));
                setBillingAddress = customerbilling.Result;

                Id = setBillingAddress.Id;
                AdNo = setBillingAddress.AdNo;
                AdCity = setBillingAddress.AdCity;
                AdRoad = setBillingAddress.AdRoad;
                Province = setBillingAddress.Province;
                Country = setBillingAddress.Country;
                MobileNo = setBillingAddress.MobileNo;
                if (setBillingAddress.LandNo == "0")
                {
                    LandNo = "";
                }
                else
                {
                    LandNo = setBillingAddress.LandNo;
                }
                PostalCode = setBillingAddress.PostalCode.ToString();

                if (PostalCode == "0")
                {
                    PostalCode = "";
                }
                FullAddress = setBillingAddress.FullAddress;
            }
            //  CustomerId = appState.user.CustomerId;
            //  UserName = appState.user.UserName;
            //  EmailAddress = appState.user.UserName;
            StateHasChanged();
        }
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        //  user = login.GetUsers();
        //user = await localStore.GetItemAsync<User>("user");
        //appState.SetUser(user);
    }

    private void checkBoxValue()
    {
        CheckedValue = !CheckedValue;
    }

    protected async void HandleSet()
    {

        resultstatus = 1;
        errorMessage = "";
        emailerror = "";
        phonenoerror = "";
        landnoerror = "";

        if (AdNo == string.Empty || AdNo == null || AdCity == string.Empty || AdCity == null || Country == string.Empty || Country == null || MobileNo == string.Empty || MobileNo == null || EmailAddress == string.Empty || EmailAddress == null || PostalCode == string.Empty || PostalCode == null || Province == string.Empty || Province == null)
        {
            resultstatus = 0;
            errorMessage = "Fill the all the required feilds";
        }

        else
        {
            if (EmailValidate() == false)
            {
                resultstatus = 0;
                emailerror = "Email address is invalid!";
                EmailAddress = "";
            }

            if (LandNo != string.Empty)
            {
                if (LandPhoneValidate() == false)
                {
                    resultstatus = 0;
                    landnoerror = "Land phone number is invalid!";
                    LandNo = "";
                }
            }

            if (PhoneValidate() == false)
            {
                resultstatus = 0;
                phonenoerror = "phone number is invalid!";
                MobileNo = "";
            }

            else if (resultstatus == 1)
            {


                resultstatus = 1;
                setBillingAddress.Id = 0;
                setBillingAddress.CustomerId = CustomerId;
                setBillingAddress.AdNo = AdNo;
                setBillingAddress.AdCity = AdCity;
                setBillingAddress.AdRoad = AdRoad;
                setBillingAddress.Province = Province;
                setBillingAddress.Country = Country;
                setBillingAddress.MobileNo = MobileNo;

                if (LandNo == null)
                {
                    LandNo = "";
                }

                setBillingAddress.LandNo = LandNo;
                setBillingAddress.EmailAddress = EmailAddress;
                if (PostalCode == "")
                {
                    setBillingAddress.PostalCode = 0;
                }
                else
                {
                    setBillingAddress.PostalCode = Convert.ToInt32(PostalCode);
                }
                setBillingAddress.Longitude = Longitude;
                setBillingAddress.Latitude = Latitude;
                setBillingAddress.UserName = UserName;
                FullAddress = "No " + AdNo + ", " + AdRoad + ", " + AdCity;
                setBillingAddress.FullAddress = FullAddress;
                setBillingAddress.District = District;



                var customerbilling = Task.Run(async () => await ProfileService.CreateCustomerBilling(setBillingAddress));
                billingid = customerbilling.Result;

                if (billingid > 0)
                {
                    if (CheckedValue == true)
                    {
                        //var customershippingAdd = Task.Run(async () => await ProfileService.GetCustomerShipping(CustomerId));
                        //getShippingAddress = customershippingAdd.Result;


                        //if (getShippingAddress.Count == 0)
                        //{
                        var customershipping = Task.Run(async () => await ProfileService.CreateCustomerShipping(setBillingAddress));
                        shippingid = customershipping.Result;

                        if (shippingid > 0)
                        {
                            NavManager.NavigateTo("/MyAddress");
                        }
                        else
                        {
                            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Shipping Address is not set correctly.");
                            NavManager.NavigateTo("/MyAddress");
                        }
                        //}

                        //else
                        //{
                        //    Id = getShippingAddress[0].Id;
                        //    setBillingAddress.Id = Id;

                        //    var customershipping = Task.Run(async () => await ProfileService.UpdateCustomerShipping(setBillingAddress));
                        //    result2 = customershipping.Result;

                        //    if (result2 == 200)
                        //    {
                        //        NavManager.NavigateTo("/MyAddress");
                        //    }
                        //    else
                        //    {
                        //        await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Shipping Address is not update correctly.");
                        //        NavManager.NavigateTo("/MyAddress");
                        //    }
                        //}



                    }

                    else
                    {
                        NavManager.NavigateTo("/MyAddress");
                    }


                }
                else
                {
                    Id = 0;
                    AdNo = "";
                    AdRoad = "";
                    AdCity = "";
                    Province = "";
                    Country = "";
                    MobileNo = "";
                    LandNo = "";
                    PostalCode = "";
                    Longitude = "";
                    Latitude = "";
                    FullAddress = "";

                    resultstatus = 0;
                    errorMessage = "Something Wrong! Please ReSubmit";
                }
            }
        }

    }

    protected async void HandleEdit()
    {
        resultstatus = 1;
        errorMessage = "";
        emailerror = "";
        phonenoerror = "";
        landnoerror = "";

        if (AdNo == string.Empty || AdNo == null || AdRoad == string.Empty || AdRoad == null || AdCity == string.Empty || AdCity == null || Province == string.Empty || Province == null || Country == string.Empty || Country == null || MobileNo == string.Empty || MobileNo == null || EmailAddress == string.Empty || EmailAddress == null)
        {
            resultstatus = 0;
            errorMessage = "Fill the all the required feilds";
        }

        else
        {
            if (EmailValidate() == false)
            {
                resultstatus = 0;
                emailerror = "Email address is invalid!";
                EmailAddress = "";
            }

            if (LandNo != null)
            {
                if (LandPhoneValidate() == false)
                {
                    resultstatus = 0;
                    landnoerror = "Land phone number is invalid!";
                    LandNo = "";
                }
            }

            if (PhoneValidate() == false)
            {
                resultstatus = 0;
                phonenoerror = "phone number is invalid!";
                MobileNo = "";
            }

            else if (resultstatus == 1)
            {

                setBillingAddress.Id = Id;
                setBillingAddress.CustomerId = CustomerId;
                setBillingAddress.AdNo = AdNo;
                setBillingAddress.AdCity = AdCity;
                setBillingAddress.AdRoad = AdRoad;
                setBillingAddress.Province = Province;
                setBillingAddress.Country = Country;
                setBillingAddress.MobileNo = MobileNo;
                if (LandNo == null)
                {
                    LandNo = "";
                }
                setBillingAddress.LandNo = LandNo;
                setBillingAddress.EmailAddress = EmailAddress;
                if (PostalCode == "")
                {
                    setBillingAddress.PostalCode = 0;
                }
                else
                {
                    setBillingAddress.PostalCode = Convert.ToInt32(PostalCode);
                }
                setBillingAddress.Longitude = Longitude;
                setBillingAddress.Latitude = Latitude;
                setBillingAddress.UserName = UserName;
                FullAddress = "No " + AdNo + ", " + AdRoad + ", " + AdCity;
                setBillingAddress.FullAddress = FullAddress;
                setBillingAddress.District = District;

                var customerbilling = Task.Run(async () => await ProfileService.UpdateCustomerBilling(setBillingAddress));
                result1 = customerbilling.Result;

                ///   NavManager.NavigateTo("/MyAddress");

                if (result1 == 200)
                {

                    if (CheckedValue == true)
                    {
                        //var customershippingAdd = Task.Run(async () => await ProfileService.GetCustomerShipping(CustomerId));
                        //getShippingAddress = customershippingAdd.Result;

                        //if(getShippingAddress.Count == 0)
                        //{
                        var customershipping = Task.Run(async () => await ProfileService.CreateCustomerShipping(setBillingAddress));
                        shippingid = customershipping.Result;

                        if (shippingid > 0)
                        {
                            NavManager.NavigateTo("/MyAddress");
                        }
                        else
                        {
                            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Shipping Address is not set correctly.");
                            NavManager.NavigateTo("/MyAddress");
                        }
                        //}
                        //else
                        //{
                        //    Id = getShippingAddress[0].Id;
                        //    setBillingAddress.Id = Id;

                        //    var customershipping = Task.Run(async () => await ProfileService.UpdateCustomerShipping(setBillingAddress));
                        //    result2 = customershipping.Result;

                        //    if (result2 == 200)
                        //    {
                        //        NavManager.NavigateTo("/MyAddress");
                        //    }
                        //    else
                        //    {
                        //        await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Shipping Address is not update correctly.");
                        //        NavManager.NavigateTo("/MyAddress");
                        //    }
                        //}


                    }

                    else
                    {
                        NavManager.NavigateTo("/MyAddress");
                    }
                }
                else
                {
                    resultstatus = 0;
                    errorMessage = "Something Wrong! Please ReSubmit";
                }

            }

        }

    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private bool EmailValidate()
    {

        if (Regex.IsMatch(EmailAddress, @"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z", RegexOptions.IgnoreCase))
        {
            return true;
        }
        else return false;
    }

    private bool PhoneValidate()
    {
        Regex phone = new Regex("[0-9]{10}");
        if (phone.IsMatch(MobileNo))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private bool LandPhoneValidate()
    {
        Regex phone = new Regex("[0-9]{10}");
        if (phone.IsMatch(LandNo))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void OnCountryChange()
    {
        stateList = new List<State>();
        Province = "";
        if (Country != String.Empty && Country != "" && Country != null)
        {
            stateList = countryList.Where(a => a.CountryCode == Country).FirstOrDefault<Country>().ListState;
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IApiService apiService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService NotificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProfileService ProfileService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState appState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService localStore { get; set; }
    }
}
#pragma warning restore 1591
