// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorServerApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.SearchProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.ViewProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.CartScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.LoginScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.CoreBusiness.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Controls;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.RegisterScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.FavProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.Web;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/checkoutPayAgain")]
    public partial class CheckoutPayAgain : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 209 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\Pages\CheckoutPayAgain.razor"
       

    private Orders order;
    private List<Address> ShippingAddress = new List<Address>();
    private int selectedOutletId;
    private string name = "";
    private string phone = "";
    private string address = "";
    private string note = "";
    private string city =  "";
    private string postalCode = "";
    private string country = "";
    private string province = "";
    private bool orderStatus = false;
    private int paymentType = 2;
    private int deliveryType = 1;
    private int deliveryOption = 2;
    private string coupon = "";
    private double total;
    private double fullTotal;
    private double discount = 0;
    private int discountStatus;
    private double deliveryFee;
    private int itemCount = 0;
    private User user;
    private RegisterUser userRegister = new RegisterUser();
    private string response = "";
    private bool agreed { get; set; } = false;
    private bool checkedOut { get; set; } = false;
    private double totalWeight = 0;


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selectedOutletId = await localStore.GetItemAsync<int>("outlet");
            order = await localStore.GetItemAsync<Orders>("payMyOrder");
            if(order != null)
            {
                total = Convert.ToDouble(order.TotalAmount);
                fullTotal = total;
                discount = Convert.ToDouble(order.DiscountAmount);
                deliveryFee = Convert.ToDouble(order.DeliveryFee);
                name = order.CustomerName;
                phone = order.CustomerName;
                var arr = order.CustomerAddress.Split(',');
                for (int i = 0; i < arr.Length - 2; i++)
                {
                    if(i == arr.Length-3)
                        address += arr[i];
                    else
                        address += arr[i] + ", ";
                }
                city = arr[arr.Length - 2];
                postalCode = arr[arr.Length-1];
                itemCount = order.ListOrderDetails.Count();
                deliveryType = order.DeliveryModeId;
                deliveryOption = order.DeliveryOptionId;
                paymentType = order.PaymentTypeId;
                if(discount > 0)
                {
                    discountStatus = 1;
                }
            }
            user = await localStore.GetItemAsync<User>("user");
            if (user != null)
            {
                var registeruser = Task.Run(async () => await ProfileService.GetCustomer(user.CustomerId));
                userRegister = registeruser.Result;

                if (userRegister != null)
                {
                    name = userRegister.CustomerFirstName + " " + userRegister.CustomerLastName;
                    phone = userRegister.CustomerMobileNo;
                    //GetUserAddress(user.CustomerId);
                }

            }
            StateHasChanged();
        }
    }

    private async void HandleCheckout()
    {
        if (total >= 2000)
        {
            string fullAddress = address + ", " + city + ", " + postalCode;
            if (deliveryType == 1 && ( name == String.Empty || name == "" || name == null || phone == String.Empty || phone == "" || phone == null || address == String.Empty || address == "" || address == null || city == String.Empty || city == "" || city == null || postalCode == String.Empty || postalCode == "" || postalCode == null))
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please fill all the data");
            }
            else if(deliveryType == 2 && (name == String.Empty || name == "" || name == null || phone == String.Empty || phone == "" || phone == null))
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please fill all the data");
            }
            else if (!agreed)
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please read and accept the terms and conditions to proceed with your order.");
            }
            else
            {
                checkedOut = true;
                var orderId = order.OrderID;
                await localStore.SetItemAsync("orderId", orderId);

                name = "";
                address = "";
                city = "";
                phone = "";
                postalCode = "";
                orderStatus = true;

                

#line default
#line hidden
#nullable disable
#nullable restore
#line 339 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\Pages\CheckoutPayAgain.razor"
                   
            }
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Minimum order amount is Rs.2000!");
        }
    }

    private async void AddCoupon()
    {
        if (coupon != null && coupon != "")
        {
            double totalN = total + discount;
            var dis = await apiService.GetDiscount(coupon, total.ToString());
            if (dis == "0.0")
            {
                discountStatus = -1;
                discount = 0;
            }
            else
            {
                discountStatus = 1;
                discount = Convert.ToDouble(dis);
            }
            totalN = cartService.GetTotal() - discount;
            fullTotal = total + deliveryFee;
            StateHasChanged();
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Enter Coupon Code!");
        }
    }

    private async void GetUserAddress(int customerId)
    {
        var customershipping = Task.Run(async () => await ProfileService.ShippingAddress(customerId));
        ShippingAddress = customershipping.Result;
        if (ShippingAddress.Count() > 0)
        {
            address = ShippingAddress[0].FullAddress;
            postalCode = ShippingAddress[0].PostalCode.ToString();
            city = ShippingAddress[0].AdCity;
            country = ShippingAddress[0].Country;
            StateHasChanged();
        }
    }

    private async void SetDeliveryFee(int type)
    {
        if (type == 1)
        {
            deliveryFee = await apiService.GetDeliveryFee(totalWeight,country, province);
            fullTotal = total + deliveryFee - discount;
            StateHasChanged();
        }
        else
        {
            deliveryFee = 0;
            fullTotal = total - discount;
        }
    }

    private void DeliveryTypeSelect()
    {
        if(deliveryType == 1)
        {
            SetDeliveryFee(1);
        }
        else
        {
            SetDeliveryFee(0);
        }
    }

    public async void ClearCart()
    {
        await localStore.RemoveItemAsync("cart");
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProfileService ProfileService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPaymentService paymentService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IApiService apiService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState appState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService localStore { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICartService cartService { get; set; }
    }
}
#pragma warning restore 1591
