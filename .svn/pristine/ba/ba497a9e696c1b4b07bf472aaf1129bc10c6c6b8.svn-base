// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorServerApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.SearchProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.ViewProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.CartScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.LoginScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.CoreBusiness.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Controls;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.RegisterScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.FavProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.Web;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Profile")]
    public partial class ProfileMyAccount : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 138 "O:\Bellvantage\MSL\BlazorServerApp\Pages\ProfileMyAccount.razor"
       

    private string fname;
    private string lname;
    private string email;
    private string mobile;

    private string currentPassword;
    private string newPassword;
    private string confirmPassword;
    private int customerid;
    private string result;
    private int passwordchange = 0;
    private string errorMessage = "";

    // private User user = new User();
    private RegisterUser userRegister = new RegisterUser();
    public User user { get; set; }

    private User currentuser = new User();

    private string iClassforPassword = "fas fa-eye-slash";
    private string passwordTypeforpassword = "password";
    private string iClassforNewPW = "fas fa-eye-slash";
    private string passwordTypeforNewPW = "password";
    private string iClassforconfirmPW = "fas fa-eye-slash";
    private string passwordTypeforconfirmPW = "password";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            user = await localStore.GetItemAsync<User>("user");
            appState.SetUser(user);
            customerid = appState.user.CustomerId;

            var registeruser = Task.Run(async () => await ProfileService.GetCustomer(customerid));
            userRegister = registeruser.Result;

            fname = userRegister.CustomerFirstName;
            lname = userRegister.CustomerLastName;
            email = appState.user.UserName;
            mobile = userRegister.CustomerMobileNo;
            //  customerid = appState.user.CustomerId;
            StateHasChanged();
        }
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        //  user = login.GetUsers();
        //user = await localStore.GetItemAsync<User>("user");
        //appState.SetUser(user);

    }

    protected async void HandleChangePassword()
    {
        passwordchange = 0;
        errorMessage = "";

        if(currentPassword == null || currentPassword == string.Empty || newPassword == null || newPassword == string.Empty ||confirmPassword == null || confirmPassword == string.Empty)
        {
            errorMessage = "Please fill all the feilds.";
        }

        else
        {

            var logincustomer = Task.Run(async () => await RegisterService.LoginUser(email, currentPassword));
            currentuser = logincustomer.Result;

            if (currentuser.LoginId == 0 && currentuser.CustomerId == 0)
            {
                newPassword = "";
                confirmPassword = "";
                currentPassword = "";
                errorMessage = "Current Password is incorrect";
            }

            else
            {

                if (string.Compare(newPassword, confirmPassword) != 0)
                {
                    newPassword = "";
                    confirmPassword = "";
                    errorMessage = "Password and confirm password is not matching";
                    ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Passwords", Detail = "are not Matching", Duration = 4000 });
                }

                else if (newPassword.Length < 8 || confirmPassword.Length < 8)
                {
                    newPassword = "";
                    confirmPassword = "";
                    errorMessage = "Password should contain more than 8 characters";
                }

                else if (string.Compare(newPassword, currentPassword) == 0)
                {
                    newPassword = "";
                    confirmPassword = "";
                    errorMessage = "Current password and new password is same. Please enter new password";
                }

                else
                {
                    var changePassword = Task.Run(async () => await ProfileService.ChangePassword(customerid, newPassword));
                    result = changePassword.Result;

                    if (result.ToLower() == "successfully updated")
                    {
                        passwordchange = 1;
                        newPassword = "";
                        confirmPassword = "";
                        currentPassword = "";
                        errorMessage = "Password is change successfully";
                        await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Password is change successfully!");
                        //   ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Successfully", Detail = "Updated", Duration = 4000 });
                        Logout();
                    }
                }
            }
        }

    }


    private void HandlePasswordIcon()
    {
        if (iClassforPassword == "fas fa-eye-slash")
        {
            iClassforPassword = "fas fa-eye";
            passwordTypeforpassword = "text";
        }
        else
        {
            iClassforPassword = "fas fa-eye-slash";
            passwordTypeforpassword = "password";
        }
    }

    private void HandleNewPasswordIcon()
    {
        if (iClassforNewPW== "fas fa-eye-slash")
        {
            iClassforNewPW = "fas fa-eye";
            passwordTypeforNewPW = "text";
        }
        else
        {
            iClassforNewPW = "fas fa-eye-slash";
            passwordTypeforNewPW = "password";
        }
    }

    private void HandleConfirmPasswordIcon()
    {
        if (iClassforconfirmPW == "fas fa-eye-slash")
        {
            iClassforconfirmPW = "fas fa-eye";
            passwordTypeforconfirmPW = "text";
        }
        else
        {
            iClassforconfirmPW = "fas fa-eye-slash";
            passwordTypeforconfirmPW = "password";
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    private async void Logout()
    {
        user = null;
        appState.SetUser(null);
        await localStore.RemoveItemAsync("user");
        StateHasChanged();
        NavManager.NavigateTo("/login");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRegisterService RegisterService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState appState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService localStore { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService NotificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProfileService ProfileService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogin login { get; set; }
    }
}
#pragma warning restore 1591
