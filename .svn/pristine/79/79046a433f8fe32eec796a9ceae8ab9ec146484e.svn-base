// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorServerApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.SearchProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.ViewProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.CartScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.LoginScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.CoreBusiness.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Controls;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.RegisterScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.FavProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.Web;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/login/{page}")]
    public partial class Login : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 88 "O:\Bellvantage\MSL\BlazorServerApp\Pages\Login.razor"
       

    private string email;
    private string password;
    private User user = new User();
    private bool loginStatus = true;
    private string errorMessage = "";
    private string iClass = "fas fa-eye-slash";
    private string passwordType = "password";

    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter]
    public string page { get; set; }

    protected override async void OnInitialized()
    {
        base.OnInitialized();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            user = await localStore.GetItemAsync<User>("user");
            if (user != null)
                NavManager.NavigateTo("/");
            StateHasChanged();
        }
    }

    protected void HandleLogin()
    {

        loginStatus = true;
        errorMessage = "";

        if (email == null || email == string.Empty || password == string.Empty || password == null)
        {
            loginStatus = false;
            errorMessage = "Email and Password is required. Please fill all the fields.";
        }

        else
        {
            loginStatus = true;
            var logincustomer = Task.Run(async () => await RegisterService.LoginUser(email, password));
            user = logincustomer.Result;

            if (user.LoginId != 0 && user.CustomerId != 0)
            {
                email = "";
                password = "";
                // user = login.LoginUser(user);
                Layout.User = user;
                UpdateCart();
                UpdateFav();
                SaveLogin(user);
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Successfuly", Detail = "Login", Duration = 1000 });
                if (page == "null")
                {
                    NavManager.NavigateTo("/");
                }
                else if (page == "NewAddress")
                {
                    NavManager.NavigateTo("/MyShippingAddress/set");
                }
                else if (page == "Donate")
                {
                    NavManager.NavigateTo("/Donate");
                }
                else if (page == "Checkout")
                {
                    NavManager.NavigateTo("/checkout");
                }
            }

            else
            {
                loginStatus = false;
                email = "";
                password = "";
                errorMessage = "Invalid email or password. Please enter correct email and password";
                ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Invalid", Detail = "User Name or Password", Duration = 1000 });
            }

        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    public async void SaveLogin(User user)
    {
        appState.SetUser(user);
        await localStore.SetItemAsync("user", user);
    }

    private void HandlePasswordIcon()
    {
        if (iClass == "fas fa-eye-slash")
        {
            iClass = "fas fa-eye";
            passwordType = "text";
        }
        else
        {
            iClass = "fas fa-eye-slash";
            passwordType = "password";
        }
    }

    private async void UpdateCart()
    {
        var guestCartProducts = await localStore.GetItemAsync<List<CartItem>>("cart-0");
        var userCartProducts = await localStore.GetItemAsync<List<CartItem>>("cart-" + user.CustomerId);
        if (userCartProducts != null && userCartProducts.Count() > 0)
        {
            cartService.SetCart(userCartProducts);
            appState.SetCartItemCount(cartService.GetTotalCount());
        }
        if (guestCartProducts != null && guestCartProducts.Count() > 0)
        {
            if (userCartProducts != null && userCartProducts.Count() > 0)
            {
                foreach (var guestCartItem in guestCartProducts)
                {
                    var found = false;
                    for (int i = 0; i < userCartProducts.Count(); i++)
                    {
                        if (userCartProducts[i].Product.productId == guestCartItem.Product.productId)
                        {
                            found = true;
                            if (userCartProducts[i].Product.MaxQtyPurchase < (userCartProducts[i].Qty + guestCartItem.Qty))
                            {
                                userCartProducts[i].Qty = userCartProducts[i].Product.MaxQtyPurchase;
                            }
                            else
                            {
                                userCartProducts[i].Qty += guestCartItem.Qty;
                            }
                        }
                    }

                    if (!found)
                    {
                        userCartProducts.Add(guestCartItem);
                    }
                }
                await localStore.SetItemAsync("cart-" + user.CustomerId, userCartProducts);
                cartService.SetCart(userCartProducts);
                appState.SetCartItemCount(cartService.GetTotalCount());
            }
            else
            {
                await localStore.SetItemAsync("cart-" + user.CustomerId, guestCartProducts);
                cartService.SetCart(guestCartProducts);
                appState.SetCartItemCount(cartService.GetTotalCount());
            }
            await localStore.RemoveItemAsync("cart-0");
        }
    }

    private async void UpdateFav()
    {
        var guestFavproducts = await localStore.GetItemAsync<List<Product>>("fav-0");
        var userFavproducts = await localStore.GetItemAsync<List<Product>>("fav-" + user.CustomerId);
        if (userFavproducts != null && userFavproducts.Count() > 0)
        {
            favProduct.SetFav(userFavproducts);
            appState.SetFavProductCount(favProduct.GetTotalCount());
        }

        if (guestFavproducts != null && guestFavproducts.Count() > 0)
        {
            if (userFavproducts != null && userFavproducts.Count() > 0)
            {
                foreach (var guestFavItem in guestFavproducts)
                {
                    var found = false;
                    for (int i = 0; i < userFavproducts.Count(); i++)
                    {
                        if (userFavproducts[i].productId == guestFavItem.productId)
                        {
                            found = true;
                        }
                    }

                    if (!found)
                    {
                        userFavproducts.Add(guestFavItem);
                    }
                }
                await localStore.SetItemAsync("fav-" + user.CustomerId, userFavproducts);
                favProduct.SetFav(userFavproducts);
                appState.SetFavProductCount(favProduct.GetTotalCount());
            }
            else
            {
                await localStore.SetItemAsync("fav-" + user.CustomerId, guestFavproducts);
                favProduct.SetFav(guestFavproducts);
                appState.SetFavProductCount(favProduct.GetTotalCount());
            }
            await localStore.RemoveItemAsync("fav-0");
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService NotificationService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState appState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRegisterService RegisterService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFavProduct favProduct { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICartService cartService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService localStore { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogin login { get; set; }
    }
}
#pragma warning restore 1591
