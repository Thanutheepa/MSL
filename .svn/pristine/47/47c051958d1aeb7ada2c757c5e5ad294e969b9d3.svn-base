// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorServerApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.SearchProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.ViewProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.CartScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.LoginScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.CoreBusiness.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Controls;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.RegisterScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.FavProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "O:\Bellvantage\MSL\BlazorServerApp\_Imports.razor"
using System.Web;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MyOrders/{OrderID:int}")]
    public partial class ViewMyOrder : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 238 "O:\Bellvantage\MSL\BlazorServerApp\Pages\ViewMyOrder.razor"
       

    private bool ShowDialog = false;
    private List<Orders> orders = new List<Orders>();
    // private User user = new User();
    private int customerid;
    private List<int> itemlist = new List<int>();
    private List<ListOrderDetail> orderitems = new List<ListOrderDetail>();
    private List<Product> products = new List<Product>();
    private List<Product> outletProducts = new List<Product>();
    private string orderdate;
    private string address;
    private string paymenttype;
    private string totalamount;
    private List<CartItem> cartProducts;
    private bool addToCartStatus = false;
    private int selectedOutletId;
    private Product cartproduct;
    private List<Product> cartproductlist;
    public bool Show { get; set; } = false;
    private int orderStatusID;
    private Orders payOrder = new Orders();
    private int ratingStarCount = 0;
    private string star1 = "far";
    private string star2 = "far";
    private string star3 = "far";
    private string star4 = "far";
    private string star5 = "far";
    private string reviewText = "";
    private int selectedItem;

    [Parameter]
    public int OrderID { get; set; }
    public User user { get; set; }

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;
        base.OnInitialized();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    protected void Close()
    {
        ShowDialog = false;
    }

    protected void Open()
    {
        ShowDialog = true;
    }

    private async void SubmitReview()
    {
        if (ratingStarCount > 0)
        {
            if (reviewText != "" && reviewText != String.Empty && reviewText != null)
            {
                await productService.AddReview(selectedItem,reviewText,user.CustomerId, ratingStarCount);
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Thank you!");
                reviewText = "";
                RatingCountChange(0);
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Review cannot be blank");
            }
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please select rating");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            await JSRuntime.InvokeAsync<object>("Star");
            user = await localStore.GetItemAsync<User>("user");
            appState.SetUser(user);
            selectedOutletId = appState.selectedOutletId;
            outletProducts = (await productService.GetProductsByOutletId(selectedOutletId)).ToList();
            customerid = appState.user.CustomerId;

            var customerorders = Task.Run(async () => await ProfileService.OrderDetails(customerid));
            orders = customerorders.Result;

            foreach (var customerorder in orders)
            {
                if (customerorder.OrderID == OrderID)
                {
                    orderdate = customerorder.OrderDate;
                    address = customerorder.CustomerAddress;
                    orderStatusID = customerorder.OrderStatusId;
                    totalamount = customerorder.TotalAmount;
                    if (customerorder.PaymentTypeId == 1)
                    {
                        paymenttype = "Cash on Delivery";
                    }
                    else if (customerorder.PaymentTypeId == 2)
                    {
                        paymenttype = "Credit Card";
                    }

                    payOrder = customerorder;
                }
            }

            var orderitemslist = Task.Run(async () => await ProfileService.OrderDetailsByOrderId(OrderID));
            orderitems = orderitemslist.Result;

            foreach (var orderItem in orderitems)
            {
                itemlist.Add(orderItem.ItemId);
            }

            //var orderproducts = Task.Run(async () => await ProfileService.OrderItemDetails(itemlist));
            products = await ProfileService.OrderItemDetails(itemlist);
            //products = orderproducts.Result;
            //  customerid = appState.user.CustomerId;
            selectedItem = orderitems[0].ItemId;
            StateHasChanged();
        }
    }

    protected async Task HandleReOrder()
    {
        cartproductlist = new List<Product>();
        if (appState.selectedOutletId > 0)
        {

            for (int i = 0; i < itemlist.Count; i++)
            {
                string s = orderitems[i].OrderQuantity;
                int productQty = Convert.ToInt32(Convert.ToDouble(s));

                //await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "i - "+i+" Products count- "+products.Count()+" Item Id- "+products[1].productId);

                //cartproduct = (await productService.GetProductByIdAndOutletId(selectedOutletId, products[i].productId));
                cartproduct = outletProducts.Where(a => a.productId == products[i].productId).FirstOrDefault();
                if (cartproduct.CurrentStock <= 0 && cartproduct.CurrentStock < productQty)
                {
                    cartproductlist.Add(cartproduct);
                }
            }

            if (cartproductlist.Count > 0)
            {

                this.Show = true;
            }
            else
            {
                this.Show = false;
                Reorder();
            }

            //for (int j = 0; j < itemlist.Count; j++)
            //{
            //    string s = orderitems[j].OrderQuantity;
            //    //int i = s.LastIndexOf('.');
            //    //string lhs = i < 0 ? s : s.Substring(0, i),
            //    //rhs = i < 0 ? "" : s.Substring(i + 1);
            //    int q = Convert.ToInt32(Convert.ToDouble(s));

            //    int productQty = q;

            //    cartproduct = (await productService.GetProductByIdAndOutletId(selectedOutletId, products[j].productId));

            //    if (cartproduct.CurrentStock != 0 && cartproduct.CurrentStock >= productQty)
            //    {
            //        var cartItem = new CartItem(cartproduct, productQty);
            //        cartProducts = cartService.AddToCart(cartItem);
            //        appState.SetCartItemCount(cartService.GetTotalCount());
            //        StateHasChanged();
            //        addToCartStatus = true;
            //        SaveCart();
            //    }

            //}
            //NavManager.NavigateTo("/cart");
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please select an outlet");
        }


    }
    private async void SaveCart()
    {
        if (user != null)
        {
            await localStore.SetItemAsync("cart-" + user.CustomerId, cartProducts);
        }
        else
        {
            await localStore.SetItemAsync("cart-0", cartProducts);
        }
    }

    private async void Reorder()
    {
        this.Show = false;
        cartproductlist.Clear();

        for (int j = 0; j < itemlist.Count; j++)
        {
            string s = orderitems[j].OrderQuantity;
            //int i = s.LastIndexOf('.');
            //string lhs = i < 0 ? s : s.Substring(0, i),
            //rhs = i < 0 ? "" : s.Substring(i + 1);
            int q = Convert.ToInt32(Convert.ToDouble(s));

            int productQty = q;

            cartproduct = (await productService.GetProductByIdAndOutletId(selectedOutletId, products[j].productId));

            if (cartproduct.CurrentStock > 0 && cartproduct.CurrentStock >= productQty)
            {
                var cartItem = new CartItem(cartproduct, productQty);
                cartProducts = cartService.AddToCart(cartItem);
                appState.SetCartItemCount(cartService.GetTotalCount());
                StateHasChanged();
                addToCartStatus = true;
                SaveCart();
            }

        }
        NavManager.NavigateTo("/cart");
    }

    private void CancelReorder()
    {
        this.Show = false;
        cartproductlist.Clear();
    }

    private async void HandlePayOrder()
    {
        await localStore.SetItemAsync("payMyOrder", payOrder);
        NavManager.NavigateTo("/checkoutPayAgain");
    }
    private void RatingCountChange(int i)
    {
        star1 = "far"; star2 = "far"; star3 = "far"; star4 = "far"; star5 = "far";
        ratingStarCount = i;
        if (i == 1)
        {
            star1 = "fas";
        }
        else if (i == 2)
        {
            star1 = "fas";
            star2 = "fas";
        }
        else if (i == 3)
        {
            star1 = "fas";
            star2 = "fas";
            star3 = "fas";
        }
        else if (i == 4)
        {
            star1 = "fas";
            star2 = "fas";
            star3 = "fas";
            star4 = "fas";
        }
        else if (i == 5)
        {
            star1 = "fas";
            star2 = "fas";
            star3 = "fas";
            star4 = "fas";
            star5 = "fas";
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProductService productService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICartService cartService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState appState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService localStore { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProfileService ProfileService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogin login { get; set; }
    }
}
#pragma warning restore 1591
