// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorServerApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\MSL\BlazorServerApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\MSL\BlazorServerApp\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.SearchProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.ViewProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.CartScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.LoginScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.CoreBusiness.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\MSL\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Controls;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\MSL\BlazorServerApp\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\MSL\BlazorServerApp\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.RegisterScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\MSL\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.FavProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\MSL\BlazorServerApp\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\MSL\BlazorServerApp\_Imports.razor"
using System.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\MSL\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\MSL\BlazorServerApp\_Imports.razor"
using System.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\MSL\BlazorServerApp\Pages\Register.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/register")]
    public partial class Register : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 137 "D:\MSL\BlazorServerApp\Pages\Register.razor"
       

    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string mobile = "";
    private int mobilevalidated = 0;
    private string date = "2021-10-07T12:46:41";
    private int status = 0;
    private int otp = 0;
    private string country = "";
    private int noofOrder = 0;
    private string password = "";
    private string confirmPassword = "";
    private int Id = 0;
    private bool datastatus = true;
    private int Loginid = 0;
    private bool registerStatus = true;
    private string emailerror = "";
    private string passworderror = "";
    private string phonenoerror = "";
    private string emailexisterror = "";
    private string passwordCharacterError = "";
    private string emailNotFound = "";
    private string passwordNotFound = "";
    private string nameCompareError = "";
    private string phoneNotFound = "";
    private string fieldRequiredError = "";

    private string iClassforPassword = "fas fa-eye-slash";
    private string passwordTypeforpassword = "password";
    private string iClassforconfirmPW = "fas fa-eye-slash";
    private string passwordTypeforconfirmPW = "password";

    List<string> countires = new List<string>() { "SriLanka", "Australia", "United Kingdom", "New Zealand" };
    private string selectcountry = "select country";

    private List<Country> countryList { get; set; }

    private RegisterUser registerUser = new RegisterUser();

    private RegisterUser result;

    //
    private User user = new User();
    private List<User> saveUser = new List<User> { };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            countryList = new List<Country>();
            countryList = (await apiService.GetCountries()).ToList();
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            StateHasChanged();
        }
    }

    private void HandleLogin()
    {
        registerStatus = true;
        datastatus = true;
        emailerror = "";
        passworderror = "";
        phonenoerror = "";
        emailexisterror = "";
        passwordCharacterError = "";
        nameCompareError = "";
        fieldRequiredError = "";

        if (firstName == string.Empty || firstName == null || lastName == string.Empty || lastName == null || email == string.Empty || email == null || password == string.Empty || password == null || confirmPassword == string.Empty || confirmPassword == null || mobile == string.Empty || mobile == null || country == string.Empty || country == null)
        {
            fieldRequiredError = "All the fields are required. Please fill all the fields.";
            registerStatus = false;
            datastatus = false;
        }

        else
        {
            if (string.Compare(firstName.ToLower(), lastName.ToLower()) == 0)
            {
                registerStatus = false;
                nameCompareError = "First name and last name should be different";
                firstName = "";
                lastName = "";
            }


            if (EmailValidate() == false)
            {
                registerStatus = false;
                emailerror = "Incorrect email address";
                email = "";
            }

            if (string.Compare(password, confirmPassword) != 0)
            {
                registerStatus = false;
                passworderror = "password and confirm password are not matching";
            }


            if (password.Length < 8 || confirmPassword.Length < 8)
            {
                registerStatus = false;
                passwordCharacterError = "password should contain more than 8 characters";
                password = "";
                confirmPassword = "";
            }


            if (passworderror != string.Empty)
            {
                password = "";
                confirmPassword = "";
            }

            if (PhoneValidate() == false)
            {
                registerStatus = false;
                phonenoerror = "Incorrect phone number";
                mobile = "";
            }

            if (!registerStatus)
            {
                datastatus = false;
            }

            else
            {
                registerUser = register.UserRegistration(Id, firstName, lastName, email, mobile, date, country);


                var registerCostomer = Task.Run(async () => await RegisterService.RegisterCustomer(registerUser));
                result = registerCostomer.Result;

                if (result == null)
                {
                    datastatus = false;
                    emailexisterror = "this email is already exist";
                }

                else
                {
                    Id = result.CustomerId;

                    login.SaveUser(Loginid, Id, email, password);

                    //new
                    user = login.GetUsers();
                    saveUser.Add(user);

                    var savelogin = Task.Run(async () => await RegisterService.SaveLogin(saveUser));
                    string loginsave = savelogin.Result;

                    if (loginsave.ToLower() == "successfully inserted")
                    {
                        ShowNotification(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Successfuly", Detail = "Verified", Duration = 1000 });
                        NavManager.NavigateTo("/login/null");
                    }

                    //  NavManager.NavigateTo("/otp_register");
                }


            }

        }


    }

    private bool EmailValidate()
    {

        if (Regex.IsMatch(email, @"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z", RegexOptions.IgnoreCase))
        {
            return true;
        }
        else return false;
    }

    private bool PhoneValidate()
    {
        Regex phone = new Regex("[0-9]{10}");
        if (phone.IsMatch(mobile))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private void HandlePasswordIcon()
    {
        if (iClassforPassword == "fas fa-eye-slash")
        {
            iClassforPassword = "fas fa-eye";
            passwordTypeforpassword = "text";
        }
        else
        {
            iClassforPassword = "fas fa-eye-slash";
            passwordTypeforpassword = "password";
        }
    }
    private void HandleConfirmPasswordIcon()
    {
        if (iClassforconfirmPW == "fas fa-eye-slash")
        {
            iClassforconfirmPW = "fas fa-eye";
            passwordTypeforconfirmPW = "text";
        }
        else
        {
            iClassforconfirmPW = "fas fa-eye-slash";
            passwordTypeforconfirmPW = "password";
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IApiService apiService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogin login { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRegisterService RegisterService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRegister register { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationService NotificationService { get; set; }
    }
}
#pragma warning restore 1591
