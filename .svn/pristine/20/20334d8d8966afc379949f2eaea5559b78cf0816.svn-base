// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorServerApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.SearchProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.ViewProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.CartScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.LoginScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.CoreBusiness.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using BlazorServerApp.Controls;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.RegisterScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using ShoppingCart.UseCases.FavProductScreen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using Microsoft.Extensions.Options;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\_Imports.razor"
using System.Web;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Donate")]
    public partial class Donate : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 234 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\Pages\Donate.razor"
       
    private List<CartItem> cartProducts = new List<CartItem>();
    private List<Product> products;
    private List<ListOrderDetail> listOrderDetail;
    private List<Address> ShippingAddress = new List<Address>();
    private string billingAdd { get; set; } = "";
    private Address BillingAddress { get; set; }
    private Address selectedAddress { get; set; }
    private int selectedOutletId;
    private string name = "";
    private string phone = "";
    private string userEmail = "";
    private string address = "";
    private string note = "";
    private string city = "";
    private string province = "";
    private string postalCode = "";
    private string country = "";
    private bool orderStatus = false;
    private int paymentType = 2;
    private int deliveryType = 1;
    private int deliveryOption = 2;
    private string coupon = "";
    private double total;
    private double fullTotal = 500;
    private double discount = 0;
    private int discountStatus;
    private double deliveryFee;
    private double totalWeight = 0;
    private User user;
    private RegisterUser userRegister = new RegisterUser();
    private string response = "";
    private bool agreed { get; set; } = false;
    private bool checkedOut { get; set; } = false;
    private bool validated { get; set; } = false;
    private string paymentLink { get; set; }
    private double abhimanaDiscount = 0;

    private List<Country> countryList { get; set; }
    private List<Product> productList { get; set; }
    private Product selectedProduct { get; set; }
    private List<State> stateList { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            countryList = new List<Country>();
            productList = new List<Product>();
            countryList = (await apiService.GetCountries()).ToList();
            productList = (await ProductService.GetProductsByCategoryId(10)).OrderBy(a => a.productId).ToList();
            selectedOutletId = await localStore.GetItemAsync<int>("outlet");
            user = await localStore.GetItemAsync<User>("user");
            //SetCart();
            if (user != null)
            {
                var registeruser = Task.Run(async () => await ProfileService.GetCustomer(user.CustomerId));
                userRegister = registeruser.Result;

                if (userRegister != null)
                {
                    name = userRegister.CustomerFirstName + " " + userRegister.CustomerLastName;
                    phone = userRegister.CustomerMobileNo;
                    userEmail = userRegister.CustomerEmailAddress;
                    GetUserAddress(user.CustomerId);
                }

                cartProducts = await localStore.GetItemAsync<List<CartItem>>("cart-" + user.CustomerId);
            }
            else
            {
                cartProducts = await localStore.GetItemAsync<List<CartItem>>("cart-0");
            }

            if (cartProducts != null)
                cartService.SetCart(cartProducts);
            StateHasChanged();
        }
    }

    private async void HandleCheckout()
    {
        listOrderDetail = cartService.GetCheckoutItems();
        if (selectedProduct != null)
        {
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 321 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\Pages\Donate.razor"
                   

            var selectedCountry = "";
            var selectedProvince = "";
            if(country != "" && country != String.Empty && country != null)
            {
                selectedCountry = countryList.Where(a => a.CountryCode == country).FirstOrDefault().CountryName;                
            }
            if(province != "" && province != String.Empty && province != null)
            {
                selectedProvince = stateList.Where(a => a.StateCode == province).FirstOrDefault().StateName;               
            }

            string fullAddress = address + ", " + city + ", " + selectedCountry + ", " + selectedProvince + ", " + postalCode;
            if (billingAdd == null || billingAdd == "")
            {
                billingAdd = address + ", " + city + " ," + selectedCountry + ", " + selectedProvince + ", " + postalCode;
            }
            if (deliveryType == 1 && (name == String.Empty || name == "" || name == null || phone == String.Empty || phone == "" || phone == null || userEmail == String.Empty || userEmail == "" || userEmail == null || address == String.Empty || address == "" || address == null || city == String.Empty || city == "" || city == null || postalCode == String.Empty || postalCode == null || country == String.Empty || country == null || province == String.Empty || province == null))
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please fill all the data");
            }
            else if (deliveryType == 2 && (name == String.Empty || name == "" || name == null || phone == String.Empty || phone == "" || phone == null || userEmail == String.Empty || userEmail == "" || userEmail == null))
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please fill all the data");
            }
            else if (!phone.All(Char.IsDigit))
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Invalid phone number (Should contain only digits)");
            }
            else if (!agreed)
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please read and accept the terms and conditions to proceed with your order.");
            }
            else
            {
                checkedOut = true;
                ListOrderDetail orderItem = new ListOrderDetail(selectedProduct.productId, selectedProduct.name, 1.ToString(), fullTotal.ToString());
                CheckoutCart checkoutCart = cartService.GetCheckoutDonate(orderItem, name, phone, fullAddress, billingAdd, paymentType.ToString(), fullTotal, selectedOutletId, deliveryFee, coupon, discount, deliveryType, deliveryOption);
                await localStore.SetItemAsync("checkout", checkoutCart);
                await localStore.SetItemAsync("userEmail", userEmail);
                await localStore.SetItemAsync("orderType", "donate");
                if (user != null)
                    response = await apiService.Checkout(checkoutCart, user.CustomerId.ToString());
                else
                    response = await apiService.Checkout(checkoutCart, "0");

                var orderId = response.Split(' ')[6];
                orderId = orderId.Remove(orderId.Length - 1);
                await localStore.SetItemAsync("orderId", orderId);

                name = "";
                address = "";
                city = "";
                phone = "";
                userEmail = "";
                postalCode = "";
                orderStatus = true;

                if (paymentType == 2)
                {
                    PaymentSession PaymentResponse = await paymentService.CreateSession(orderId, checkoutCart.TotalAmount, fullAddress);
                    await localStore.SetItemAsync("paymentIndicator", PaymentResponse.successIndicator);

                    await JSRuntime.InvokeAsync<object>("PaymentGateway", PaymentResponse.SessionId.ToString());
                    await JSRuntime.InvokeAsync<object>("Checkout.showPaymentPage");
                    checkedOut = false;
                }
                else
                {
                    NavManager.NavigateTo("/paymentSuccess");
                    checkedOut = false;
                }
            }
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 399 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\Pages\Donate.razor"
                   
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please Select a Donation Type!");
        }
    }
    private async void SetCart()
    {
        if (user != null)
        {
            cartProducts = await localStore.GetItemAsync<List<CartItem>>("cart-" + user.CustomerId);
        }
        else
        {
            cartProducts = await localStore.GetItemAsync<List<CartItem>>("cart-0");
        }

        if (cartProducts != null)
        {
            cartService.SetCart(cartProducts);
            appState.SetCartItemCount(cartService.GetTotalCount());
        }
        else
        {
            cartService.EmptyCart();
            appState.SetCartItemCount(0);
        }
        total = cartService.GetTotal();
        fullTotal = total;
        totalWeight = cartService.GetTotalWeight();
        StateHasChanged();
    }
    private async void GetUserAddress(int customerId)
    {
        var customershipping = Task.Run(async () => await ProfileService.ShippingAddress(customerId));
        var customerBilling = Task.Run(async () => await ProfileService.BillingAddress(customerId));
        ShippingAddress = customershipping.Result;
        BillingAddress = customerBilling.Result;
        if (ShippingAddress.Count() > 0)
        {
            SetAddress(ShippingAddress[0]);
        }
        if (BillingAddress != null)
        {
            billingAdd = BillingAddress.FullAddress + ", " + BillingAddress.AdCity + ", " + " ," + BillingAddress.Country + "," + BillingAddress.PostalCode;
        }
    }

    private void SetAddress(Address val)
    {
        selectedAddress = val;
        address = val.FullAddress;
        postalCode = val.PostalCode.ToString();
        city = val.AdCity;
        province = val.Province;
        country = val.Country;
        stateList = new List<State>();
        stateList = countryList.Where(a => a.CountryCode == country).FirstOrDefault<Country>().ListState;
        province = val.Province;
        StateHasChanged();
    }
    private void OnCountryChange()
    {
        stateList = new List<State>();
        province = "";
        if (country != String.Empty && country != "" && country != null)
        {
            stateList = countryList.Where(a => a.CountryCode == country).FirstOrDefault<Country>().ListState;
        }
    }
    private void PaymentSelect(int val)
    {
        paymentType = val;
    }
    public async void ClearCart()
    {
        if (user != null)
        {
            await localStore.RemoveItemAsync("cart-" + user.CustomerId);
        }
        else
        {
            await localStore.RemoveItemAsync("cart-0");
        }
    }
    public async void DonationSelect()
    {
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 487 "D:\Documents\Bellvantage\Mother Sri Lanka_SVN\BlazorServerApp\Pages\Donate.razor"
                                                                                                                               
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfiguration Configuration { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Security security { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProductService ProductService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProfileService ProfileService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPaymentService paymentService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IApiService apiService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AppState appState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService localStore { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICartService cartService { get; set; }
    }
}
#pragma warning restore 1591
