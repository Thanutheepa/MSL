@inject NavigationManager NavManager
@inject ILocalStorageService localStore
@inject IOutletService OutletService
@inject AppState appState
@inject IJSRuntime JSRuntime
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IFavProduct favProduct
@inject ICartService cartService

<div class="row mt-5 mt-md-4 my-2">
    <div class="col-md-4 d-inline-flex centerCol">
        <div class="dropdown w-100 text-left">
            <button class="btn proCategoriesBtn dropdown-toggle text-left" type="button" data-toggle="dropdown">
                Shop by Category
                <span class="caret"></span>
            </button>
            <ul class="proCat dropdown-menu">
                @if (allCategories != null)
                {
                    <li><NavLink class="dropdown-item" href="@($"/searchPage/null/-1")">All Categories</NavLink></li>

                    @foreach (var cateogry in allCategories)
                    {
                        <li><NavLink class="dropdown-item" href="@($"/searchPage/null/"+cateogry.CategoryId)">@cateogry.Name</NavLink></li>
                    }
                }
            </ul>
        </div>
    </div>
    <div class="col-md-8 text-center d-inline-flex">
        <div id="searchBox" class="mt-2 mt-md-0">
            @if (!isNewPage)
            {
                <input type="text" placeholder="Search...." id="searchBox" class="form-control mr-2" @bind-value="searchValue" @bind-value:event="oninput" @onkeyup="Search" />
            }
            else
            {
                <input type="text" placeholder="Search...." id="searchBox" class="form-control mr-2" @bind-value="searchValue" @onkeyup="Enter" />
            }
            <button class="btn" @onclick="Search"><i class="topIcons fas fa-search"></i></button>
        </div>
    </div>
</div>


@code {

    private IEnumerable<Outlet> outlets { get; set; }
    private int selectedOutletId;
    private IEnumerable<Product> allProducts { get; set; }
    private List<Product> currentfavproducts = new List<Product>();
    private IEnumerable<Category> allCategories { get; set; }
    private List<Product> newfavproducts;
    private User user;

    [Parameter]
    public string searchValue { get; set; }

    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    [Parameter]
    public EventCallback<string> OnOutletSelect { get; set; }

    [Parameter]
    public bool isNewPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        outlets = (await OutletService.GetAllOutlets());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            allCategories = (await CategoryService.GetAllCategories()).ToList();
            user = await localStore.GetItemAsync<User>("user");
            selectedOutletId = await localStore.GetItemAsync<int>("outlet");
            StateHasChanged();
        }
    }

    private void Search()
    {
        if (isNewPage)
        {
            if (searchValue == String.Empty || searchValue == null)
            {
                NavManager.NavigateTo("/searchPage/null/-1");
            }
            else
            {
                NavManager.NavigateTo("/searchPage/" + searchValue + "/-1");
            }
        }
        else
        {
            OnSearch.InvokeAsync(searchValue);
        }
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            Search();
        }
    }

    private void OutletSelect(ChangeEventArgs e)
    {
        OnOutletSelect.InvokeAsync(e.Value.ToString());
        SaveSelectedOutlet(Convert.ToInt32(e.Value.ToString()));
    }

    private void OnChange(object args)
    {
        OnOutletSelect.InvokeAsync(args.ToString());
        SaveSelectedOutlet(Convert.ToInt32(args.ToString()));
    }

    private async void SaveSelectedOutlet(int outletIt)
    {
        appState.SetCartItemCount(0);
        cartService.EmptyCart();
        await localStore.SetItemAsync("outlet", outletIt);
        if (user != null)
        {
            await localStore.RemoveItemAsync("cart-" + user.CustomerId);
        }
        else
        {
            await localStore.RemoveItemAsync("cart-0");
        }

        UpdateFavorite(outletIt);
    }

    private async void UpdateFavorite(int outletid)
    {
        newfavproducts = new List<Product>();

        allProducts = (await ProductService.GetProductsByOutletId(outletid)).ToList();
        if (user != null)
        {
            currentfavproducts = await localStore.GetItemAsync<List<Product>>("fav-" + user.CustomerId);
        }
        else
        {
            currentfavproducts = await localStore.GetItemAsync<List<Product>>("fav-0");
        }

        if (currentfavproducts != null)
        {
            foreach (var currentproduct in currentfavproducts)
            {
                foreach (var allproducts in allProducts)
                {

                    if (allproducts.productId == currentproduct.productId)
                    {
                        newfavproducts.Add(allproducts);
                    }
                }
            }
        }

        favProduct.EmptyFav();
        favProduct.SetFav(newfavproducts);
        appState.SetFavProductCount(favProduct.GetTotalCount());
        if (user != null)
        {
            await localStore.RemoveItemAsync("fav-" + user.CustomerId);
            await localStore.SetItemAsync("fav-" + user.CustomerId, newfavproducts);
        }
        else
        {
            await localStore.RemoveItemAsync("fav-0");
            await localStore.SetItemAsync("fav-0", newfavproducts);
        }
        StateHasChanged();
    }
}
