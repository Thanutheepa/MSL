@page "/paymentSuccessMobile"

@inject NavigationManager NavManager
@inject ILocalStorageService localStore
@inject ICartService cartService
@inject IApiService apiService
@inject IApiService apiService2
@inject AppState appState
@inject IJSRuntime JSRuntime
@inject ISendEmails sendEmails
@inject IProfileService ProfileService
@inject IPaymentService paymentService
@using System.Text

@if ((resultIndicator != null && paymentIndicator != null))
{
    <div class="container topMargin">
        <div class="row">
            <div class="col-0 col-md-1 col-lg-2"></div>
            <div class="col-12 col-md-10 col-lg-8">
                <div class="summeryBox mt-4 text-center">
                    @if ((paymentIndicator == resultIndicator))
                    {
                        <h1 class="text-success"><i class="far fa-check-circle"></i></h1>
                        <h1>Order Successfull!</h1>
                    }
                    else
                    {
                        <h1 class="text-danger"><i class="far fa-times-circle"></i></h1>
                        <h1>Order Failed!</h1>
                    }
                    @if (orderId != null)
                    {<p>@orderId</p>
                }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container topMargin">
        <div class="row">
            <div class="col-12 centerCol pt-5">
                <img src="images/Loading.gif" width="150" />
            </div>
        </div>
    </div>
}

@code {

    private List<CheckoutCart> checkoutCart { get; set; }
    private List<CartItem> cartProducts;
    private string resultIndicator;
    private string paymentIndicator;
    private string orderId;

    protected override async void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var param = uri.ToString().Split('?')[1];
        var resultIndicatorParam = param.Split('&')[0];
        resultIndicator = resultIndicatorParam.Split('=')[1];

        orderId = await localStore.GetItemAsync<string>("orderId");
        checkoutCart = await apiService.GetOrderDetails(orderId);
        paymentIndicator = await localStore.GetItemAsStringAsync("paymentIndicator");
        paymentIndicator = paymentIndicator.Remove(0, 1);
        paymentIndicator = paymentIndicator.Remove(paymentIndicator.Length - 1);

        if (paymentIndicator == resultIndicator)
        {
            await apiService2.UpdateOrder(orderId);
            await localStore.RemoveItemAsync("orderId");
            await localStore.RemoveItemAsync("paymentIndicator");
        }

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            StateHasChanged();
        }
    }


}
