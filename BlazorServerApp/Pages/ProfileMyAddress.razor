@page  "/MyAddress"

@inject ILocalStorageService localStore
@inject IProfileService ProfileService
@inject ILogin login
@inject ILocalStorageService localStore
@inject AppState appState
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

<div class="container topMargin">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><NavLink href="/" class="bread"><i class="fas fa-home"></i> Home</NavLink></li>
                    <li class="breadcrumb-item active" aria-current="page">My Addresses</li>
                </ol>
            </nav>

        </div>
    </div>
    <div class="row mt-5 mt-md-4 my-2">
        <div class="col-xl-12">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link" href="profile">Account Details</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link " href="MyOrders">Orders</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="MyAddress">Address</a>
                </li>
            </ul>
        </div>
    </div>

    <div class="row">
        <div class="col-md-2 d-none d-md-block"></div>
        <div class="col-md-8 addressCenterCol centerCol">
            <div class="ordersBox loginBox">

                <div class="card text-center" style="margin-bottom:20px">
                    <div class="card-body">
                        <h5 class="card-title">Your Billing Addresses</h5>
                        <p class="card-text">@customerName</p>
                    </div>
                </div>

                <div class="card w-100" style="margin-bottom:20px">
                    <div class="card-body">
                        <h5 class="card-title" style="color: rgb(139, 30, 41)">Billing Address</h5>
                        @if (billingAddress.Id == 0)
                        {
                            <div class="row">
                                <div class="col-md-8">
                                    <p class="card-text">You have not set up Billing address yet.</p>
                                </div>
                                <div class="col-md-4 pt-3 pt-md-0">
                                    <a href="MyBillingAddress/@set.ToString()" class="btn checkoutBtn w-100">Set Billing Address</a>
                                </div>
                            </div>


                        }
                        else
                        {
                            <div class="row">
                                <div class="col-8">
                                    <p class="card-text" style="font-weight:bold">@billingAddress.FullAddress</p>
                                    <p class="card-text">@billingAddress.MobileNo</p>
                                </div>
                                <div class="col-6 col-md-2 pt-3 pt-md-0 pr-1">
                                    <a href="MyBillingAddress/@edit.ToString()" class="btn checkoutBtn changeDelete">Change</a>
                                </div>
                                <div class="col-6 col-md-2 pt-3 pt-md-0 pl-1">
                                    <button type="submit" @onclick="DeleteBilling" class="btn checkoutBtn changeDelete btnDelete">Delete</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="card w-100" style="margin-bottom:20px">
                    <div class="card-body">
                        <h5 class="card-title" style="color: rgb(139, 30, 41)">Shipping address</h5>

                        @if (ShippingAddress.Count == 0)
                        {
                            <div class="row">
                                <div class="col-md-8">
                                    <p class="card-text">You have not set up Shipping address yet.</p>
                                </div>
                                <div class="col-md-4 pt-3 pt-md-0">
                                    <a href="MyShippingAddress/set" class="btn checkoutBtn w-100">Set Shipping Address</a>

                                </div>
                            </div>


                        }
                        else
                        {
                            @foreach (var shippingAddress in ShippingAddress)
                            {

                                <div class="row pt-4">
                                    <div class="col-md-8">
                                        <p class="card-text" style="font-weight:bold">@shippingAddress.FullAddress</p>
                                        <p class="card-text">@shippingAddress.MobileNo</p>
                                    </div>
                                    <div class="col-6 col-md-2 pt-3 pt-md-0 pr-1">
                                        <a href="MyShippingAddress/@shippingAddress.Id.ToString()" class="btn checkoutBtn changeDelete">Change</a>
                                    </div>
                                    <div class="col-6 col-md-2 pt-3 pt-md-0 pl-1">
                                        <button type="submit" @onclick="@(() => DeleteShipping(shippingAddress.Id))" class="btn checkoutBtn changeDelete btnDelete">Delete</button>
                                    </div>
                                </div>
                            }
                            <div class="row">
                                <div class="col-md-2 pt-3 pr-1">
                                    <a href="MyShippingAddress/set" class="btn AddAddressBtn changeDelete">Add New</a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private Address billingAddress = new Address();
    private List<Address> ShippingAddress = new List<Address>();
    //  private User user = new User();
    private string customerName;
    private int customerId;
    private string status;
    private int set = 1;
    private int edit = 2;
    private int billingId;
    private int shipppingId;
    private int Deleteresult1;
    private int Deleteresult2;

    public User user { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            user = await localStore.GetItemAsync<User>("user");
            appState.SetUser(user);
            customerName = appState.user.UserName;
            customerId = appState.user.CustomerId;

            var customerbilling = Task.Run(async () => await ProfileService.BillingAddress(customerId));
            billingAddress = customerbilling.Result;


            var customershipping = Task.Run(async () => await ProfileService.ShippingAddress(customerId));
            ShippingAddress = customershipping.Result;
            StateHasChanged();
            //  customerid = appState.user.CustomerId;
        }
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        //  user = login.GetUsers();

    }

    private async void DeleteBilling()
    {

        billingId = billingAddress.Id;

        var deletebilling = Task.Run(async () => await ProfileService.DeleteCustomerBilling(billingId));
        Deleteresult1 = deletebilling.Result;

        if (Deleteresult1 == 200)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Successfully Delete!");

        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Delete is Unsuccessfull!");

        }

        var customerbilling = Task.Run(async () => await ProfileService.BillingAddress(customerId));
        billingAddress = customerbilling.Result;


        var customershipping = Task.Run(async () => await ProfileService.ShippingAddress(customerId));
        ShippingAddress = customershipping.Result;
        StateHasChanged();

    }
    private async void DeleteShipping(int id)
    {

        shipppingId = id;

        var deleteshipping = Task.Run(async () => await ProfileService.DeleteCustomerShipping(shipppingId));
        Deleteresult2 = deleteshipping.Result;

        if (Deleteresult2 == 200)
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Successfully Delete!");

        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Delete is Unsuccessfull!");
        }

        var customerbilling = Task.Run(async () => await ProfileService.BillingAddress(customerId));
        billingAddress = customerbilling.Result;


        var customershipping = Task.Run(async () => await ProfileService.ShippingAddress(customerId));
        ShippingAddress = customershipping.Result;
        StateHasChanged();
    }


}
