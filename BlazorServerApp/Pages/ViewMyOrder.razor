@page "/MyOrders/{OrderID:int}"

@inject ILogin login
@inject IProfileService ProfileService
@inject ILocalStorageService localStore
@inject AppState appState
@inject ICartService cartService
@inject NavigationManager NavManager
@inject IProductService productService
@inject IJSRuntime JSRuntime

<div class="container topMargin">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><NavLink href="/" class="bread"><i class="fas fa-home"></i> Home</NavLink></li>
                    <li class="breadcrumb-item active" aria-current="page">My Order</li>
                </ol>
            </nav>

        </div>
    </div>
    <div class="row mt-5 mt-md-4 my-2">
        <div class="col-xl-12">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link" href="profile">Account Details</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link active" href="MyOrders">Orders</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="MyAddress">Address</a>
                </li>
            </ul>
        </div>
    </div>

    @if (Show)
    {
        <div class="modal" tabindex="-1" role="dialog" style="display: @(Show ? "block" : "none")">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm</h5>
                    </div>
                    <div class="modal-body">
                        <p class="text-success">These Products are Out of Stock</p>

                        @foreach (var productlist in cartproductlist)
                        {
                            <p>@productlist.name</p>
                        }

                        @if (itemlist.Count == cartproductlist.Count)
                        {
                            <p class="text-danger">No Products to add to cart</p>
                        }
                        else
                        {
                            <p class="text-danger">Do you want to Continue?</p>
                        }
                    </div>
                    <div class="modal-footer">
                        @if (itemlist.Count == cartproductlist.Count)
                        {
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CancelReorder">Cancel</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-primary" @onclick="Reorder">Continue</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CancelReorder">Cancel</button>
                        }


                    </div>
                </div>
            </div>
        </div>
    }


    <div class="row fullHeight">
        @*<div class="col-md-2"></div>*@
        <div class="col-md-7 ">
            <div class="ordersBox loginBox">
                @*<div class="row">
                        <div class="col-6"><h2>Order No: @OrderID</h2></div>
                        @if (orderdate != null)
                        {
                            <div class="col-6"><h5>@orderdate.Replace('T', ' ')</h5></div>
                        }
                        <div class="col-12"><h5>No of Items : @itemlist.Count</h5></div>
                    </div>*@
                @if (appState.currRate != null)
                {
                    @for (int i = 0; i < itemlist.Count; i++)
                    {
                        <div class="card w-100" style="margin-bottom:20px">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-3"><img src="@products[i].ImageUrl" style="height:100px" /></div>
                                    <div class="col-9">
                                        <div class="row">
                                            <div class="col-12"><p class="card-text" style="font-weight:bold;font-size:18px;margin-bottom:10px">Item: @orderitems[i].ItemName</p></div>
                                            <div class="col-6"><p class="card-text" style="margin-bottom:10px">x @Convert.ToInt32(Convert.ToDouble(orderitems[i].OrderQuantity))</p></div>
                                            <div class="col-6"><p class="card-text" style="margin-bottom:10px">@appState.currRate.CurrencySymbol@Convert.ToDouble(String.Format("{0:0.00}", @Math.Round(Convert.ToDouble(orderitems[i].Amount) / appState.currRate.BuyingRate, 2))).ToString("N")</p></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                @*<div class="card w-100">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-6"><p class="card-text" style="margin-bottom:10px">Shipping Address</p></div>
                                <div class="col-6"><p class="card-text" style="margin-bottom:10px">@address</p></div>
                                <div class="col-6"><p class="card-text" style="margin-bottom:10px">Payment Method</p></div>
                                <div class="col-6"><p class="card-text" style="margin-bottom:10px">@paymenttype</p></div>
                                <div class="col-6"><p class="card-text" style="margin-bottom:10px">Total Amount</p></div>
                                <div class="col-6"><p class="card-text" style="margin-bottom:10px">@Convert.ToInt32(Convert.ToDouble(totalamount))</p></div>
                                @if (orderStatusID == 0)
                                {
                                    <button type="submit" class="btn checkoutBtn w-100" @onclick="HandlePayOrder">Pay Now</button>
                                }
                                else
                                {
                                    <button type="submit" class="btn checkoutBtn w-100" @onclick="HandleReOrder">Edit and Reorder</button>
                                }

                            </div>

                        </div>
                    </div>*@
            </div>
        </div>

        <div class="col-md-5 mt-4 mt-md-0">
            <div class="summeryBox">
                <h2 style="margin-bottom:15px">Order Details</h2>
                <div class="row">
                    <div class="col-5"><label>Order No:</label></div>
                    <div class="col-7"><label style="font-weight:bold; margin-bottom:10px">@OrderID</label></div>
                    @if (orderdate != null)
                    {
                        <div class="col-5"><label>Order Date:</label></div>
                        <div class="col-7"><label style="font-weight: bold; margin-bottom: 10px">@orderdate.Replace('T', ' ')</label></div>
                    }
                    <div class="col-5"><label>No of Items :</label></div>
                    <div class="col-7"><label style="font-weight: bold; margin-bottom: 10px">@itemlist.Count items</label></div>
                </div>
                <hr />

                <div class="row">
                    <div class="col-5"><p class="card-text" style="margin-bottom:10px">Shipping Address</p></div>
                    <div class="col-7"><p class="card-text" style="margin-bottom:10px">@address</p></div>
                    <div class="col-5"><p class="card-text" style="margin-bottom:10px">Payment Method</p></div>
                    <div class="col-7"><p class="card-text" style="margin-bottom:10px">@paymenttype</p></div>
                    <div class="col-5"><p class="card-text" style="margin-bottom:10px">Total Amount</p></div>
                    @if (appState.currRate != null)
                    {
                        <div class="col-7"><p class="card-text" style="margin-bottom:10px">@appState.currRate.CurrencySymbol@Convert.ToDouble(String.Format("{0:0.00}", @Math.Round(Convert.ToDouble(totalamount) / appState.currRate.BuyingRate, 2))).ToString("N")</p></div>
                    }
                    @if (orderStatusID == 0)
                    {
                        <button type="submit" class="btn checkoutBtn w-100 mt-5" @onclick="HandlePayOrder">Pay Now</button>
                    }
                    else
                    {
                        <button type="submit" class="btn checkoutBtn w-100 mt-5" @onclick="HandleReOrder">Edit and Reorder</button>
                    }

                    <button class="btn btn-success reviewBtn w-100 mt-2" @onclick="Open">Add Reviews</button>

                </div>
            </div>
        </div>

    </div>
</div>

@if (ShowDialog == true)
{
    <div class="container" style="width:100% ">
        <div class="modal" id="exampleModal" tabindex="-1" role="dialog" style="display: @(ShowDialog ? "block" : "none")">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="titleLabel">Add Reviews</h5>
                        <button type="button" class="close" @onclick="Close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">×</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="col-12">
                            <div class="form-group">
                                <label for="selectItem">SELECT IITEM<span class="text-danger">*</span></label>
                                <select class="form-control" id="selectItem" @bind="selectedItem">
                                     @for (int i = 0; i < itemlist.Count; i++)
                                     {
                                        <option value="@orderitems[i].ItemId">@orderitems[i].ItemName</option>
                                     }
                                </select>
                            </div>
                        </div>
                        <div class="col-12">
                            <p>YOUR RATING<span class="text-danger">*</span></p>
                            <p class="ratingStars">
                                <i class="@star1 fa-star star star1" @onclick="() => RatingCountChange(1)"></i>
                                <i class="@star2 fa-star star star2" @onclick="() => RatingCountChange(2)"></i>
                                <i class="@star3 fa-star star star3" @onclick="() => RatingCountChange(3)"></i>
                                <i class="@star4 fa-star star star4" @onclick="() => RatingCountChange(4)"></i>
                                <i class="@star5 fa-star star star5" @onclick="() => RatingCountChange(5)"></i>
                            </p>


                        </div>
                        <div class="col-12">
                            <div class="form-group">
                                <label for="reviewText">YOUR REVIEW<span class="text-danger">*</span></label>
                                <textarea class="form-control checkoutForm" id="reviewText" placeholder="Your Review" @bind="reviewText"></textarea>
                            </div>
                        </div>
                        <div class="col-12">
                            <button class="btn checkoutBtn w-100 mt-4" @onclick="SubmitReview">SUBMIT</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

@code {

    private bool ShowDialog = false;
    private List<Orders> orders = new List<Orders>();
    // private User user = new User();
    private int customerid;
    private List<int> itemlist = new List<int>();
    private List<ListOrderDetail> orderitems = new List<ListOrderDetail>();
    private List<Product> products = new List<Product>();
    private List<Product> outletProducts = new List<Product>();
    private string orderdate;
    private string address;
    private string paymenttype;
    private string totalamount;
    private List<CartItem> cartProducts;
    private bool addToCartStatus = false;
    private int selectedOutletId;
    private Product cartproduct;
    private List<Product> cartproductlist;
    public bool Show { get; set; } = false;
    private int orderStatusID;
    private Orders payOrder = new Orders();
    private int ratingStarCount = 0;
    private string star1 = "far";
    private string star2 = "far";
    private string star3 = "far";
    private string star4 = "far";
    private string star5 = "far";
    private string reviewText = "";
    private int selectedItem;

    [Parameter]
    public int OrderID { get; set; }
    public User user { get; set; }

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;
        base.OnInitialized();
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }

    protected void Close()
    {
        ShowDialog = false;
    }

    protected void Open()
    {
        ShowDialog = true;
    }

    private async void SubmitReview()
    {
        if (ratingStarCount > 0)
        {
            if (reviewText != "" && reviewText != String.Empty && reviewText != null)
            {
                await productService.AddReview(selectedItem,reviewText,user.CustomerId, ratingStarCount);
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "success", "", "Thank you!");
                reviewText = "";
                RatingCountChange(0);
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Review cannot be blank");
            }
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please select rating");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<object>("NavBarFixed");
            await JSRuntime.InvokeAsync<object>("Star");
            user = await localStore.GetItemAsync<User>("user");
            appState.SetUser(user);
            selectedOutletId = appState.selectedOutletId;
            outletProducts = (await productService.GetProductsByOutletId(selectedOutletId)).ToList();
            customerid = appState.user.CustomerId;

            var customerorders = Task.Run(async () => await ProfileService.OrderDetails(customerid));
            orders = customerorders.Result;

            foreach (var customerorder in orders)
            {
                if (customerorder.OrderID == OrderID)
                {
                    orderdate = customerorder.OrderDate;
                    address = customerorder.CustomerAddress;
                    orderStatusID = customerorder.OrderStatusId;
                    totalamount = customerorder.TotalAmount;
                    if (customerorder.PaymentTypeId == 1)
                    {
                        paymenttype = "Cash on Delivery";
                    }
                    else if (customerorder.PaymentTypeId == 2)
                    {
                        paymenttype = "Credit Card";
                    }

                    payOrder = customerorder;
                }
            }

            var orderitemslist = Task.Run(async () => await ProfileService.OrderDetailsByOrderId(OrderID));
            orderitems = orderitemslist.Result;

            foreach (var orderItem in orderitems)
            {
                itemlist.Add(orderItem.ItemId);
            }

            //var orderproducts = Task.Run(async () => await ProfileService.OrderItemDetails(itemlist));
            products = await ProfileService.OrderItemDetails(itemlist);
            //products = orderproducts.Result;
            //  customerid = appState.user.CustomerId;
            selectedItem = orderitems[0].ItemId;
            StateHasChanged();
        }
    }

    protected async Task HandleReOrder()
    {
        cartproductlist = new List<Product>();
        if (appState.selectedOutletId > 0)
        {

            for (int i = 0; i < itemlist.Count; i++)
            {
                string s = orderitems[i].OrderQuantity;
                int productQty = Convert.ToInt32(Convert.ToDouble(s));

                //await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "i - "+i+" Products count- "+products.Count()+" Item Id- "+products[1].productId);

                //cartproduct = (await productService.GetProductByIdAndOutletId(selectedOutletId, products[i].productId));
                cartproduct = outletProducts.Where(a => a.productId == products[i].productId).FirstOrDefault();
                if (cartproduct.CurrentStock <= 0 && cartproduct.CurrentStock < productQty)
                {
                    cartproductlist.Add(cartproduct);
                }
            }

            if (cartproductlist.Count > 0)
            {

                this.Show = true;
            }
            else
            {
                this.Show = false;
                Reorder();
            }

            //for (int j = 0; j < itemlist.Count; j++)
            //{
            //    string s = orderitems[j].OrderQuantity;
            //    //int i = s.LastIndexOf('.');
            //    //string lhs = i < 0 ? s : s.Substring(0, i),
            //    //rhs = i < 0 ? "" : s.Substring(i + 1);
            //    int q = Convert.ToInt32(Convert.ToDouble(s));

            //    int productQty = q;

            //    cartproduct = (await productService.GetProductByIdAndOutletId(selectedOutletId, products[j].productId));

            //    if (cartproduct.CurrentStock != 0 && cartproduct.CurrentStock >= productQty)
            //    {
            //        var cartItem = new CartItem(cartproduct, productQty);
            //        cartProducts = cartService.AddToCart(cartItem);
            //        appState.SetCartItemCount(cartService.GetTotalCount());
            //        StateHasChanged();
            //        addToCartStatus = true;
            //        SaveCart();
            //    }

            //}
            //NavManager.NavigateTo("/cart");
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("ErrorAlert", "error", "", "Please select an outlet");
        }


    }
    private async void SaveCart()
    {
        if (user != null)
        {
            await localStore.SetItemAsync("cart-" + user.CustomerId, cartProducts);
        }
        else
        {
            await localStore.SetItemAsync("cart-0", cartProducts);
        }
    }

    private async void Reorder()
    {
        this.Show = false;
        cartproductlist.Clear();

        for (int j = 0; j < itemlist.Count; j++)
        {
            string s = orderitems[j].OrderQuantity;
            //int i = s.LastIndexOf('.');
            //string lhs = i < 0 ? s : s.Substring(0, i),
            //rhs = i < 0 ? "" : s.Substring(i + 1);
            int q = Convert.ToInt32(Convert.ToDouble(s));

            int productQty = q;

            cartproduct = (await productService.GetProductByIdAndOutletId(selectedOutletId, products[j].productId));

            if (cartproduct.CurrentStock > 0 && cartproduct.CurrentStock >= productQty)
            {
                var cartItem = new CartItem(cartproduct, productQty);
                cartProducts = cartService.AddToCart(cartItem);
                appState.SetCartItemCount(cartService.GetTotalCount());
                StateHasChanged();
                addToCartStatus = true;
                SaveCart();
            }

        }
        NavManager.NavigateTo("/cart");
    }

    private void CancelReorder()
    {
        this.Show = false;
        cartproductlist.Clear();
    }

    private async void HandlePayOrder()
    {
        await localStore.SetItemAsync("payMyOrder", payOrder);
        NavManager.NavigateTo("/checkoutPayAgain");
    }
    private void RatingCountChange(int i)
    {
        star1 = "far"; star2 = "far"; star3 = "far"; star4 = "far"; star5 = "far";
        ratingStarCount = i;
        if (i == 1)
        {
            star1 = "fas";
        }
        else if (i == 2)
        {
            star1 = "fas";
            star2 = "fas";
        }
        else if (i == 3)
        {
            star1 = "fas";
            star2 = "fas";
            star3 = "fas";
        }
        else if (i == 4)
        {
            star1 = "fas";
            star2 = "fas";
            star3 = "fas";
            star4 = "fas";
        }
        else if (i == 5)
        {
            star1 = "fas";
            star2 = "fas";
            star3 = "fas";
            star4 = "fas";
            star5 = "fas";
        }
    }
}
